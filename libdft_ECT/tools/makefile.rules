##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################

###### Additional includes that are specific to this directory ######

# Placeholder for additional include files.


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := 

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS := #test_mini

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS := extract

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS := #mini_test

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS := 

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS := 

###### Place architecture-specific definitions here ######

# Place ia32-specific definitions here if they apply to all supported operating systems.
ifeq ($(TARGET),ia32)
    TOOL_CXXFLAGS += -m32 
    LIBDFT_INC_PATH	= $(realpath ../src32/)
    LIBDFT_PATH	= $(realpath ../src32/obj-ia32/)
endif

# Place intel64-specific definitions here if they apply to all supported operating systems.
ifeq ($(TARGET),intel64)
	TOOL_CXXFLAGS +=
    LIBDFT_INC_PATH	= $(realpath ../src/)
    LIBDFT_PATH	= $(realpath ../src/obj-intel64/)
endif

##############################################################
#
# Test recipes
#
##############################################################

###### Finalize sanity here ######

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

###### Special tools' build rules ######
SYLVAN_INC_PATH = $(realpath ../sylvan/src)
SYLVAN_LIB_PATH = $(realpath ../sylvan/build)
EWAH_INC_PATH = $(realpath ../ewah_0.4.0)
DWARF_INC_PATH = ${PIN_ROOT}/extras/libdwarf/libdwarf-0.4.2/src/lib/libdwarf
LOGGING_FLAGS = -DNO_PINTOOL_LOG


ifeq ($(SSA_FLAG),SSA_NOGC)
    TOOL_LIBS += -L$(LIBDFT_PATH) -ldft -L${SYLVAN_LIB_PATH} -lSylvan_nogc -lm-dynamic -ldwarf 
    TOOL_CXXFLAGS += $(LOGGING_FLAGS) -I$(LIBDFT_INC_PATH) -I${EWAH_INC_PATH} -I${SYLVAN_INC_PATH} -I${DWARF_INC_PATH} -L$(LIBDFT_PATH) -mfsgsbase -DSSA_NOGC ${TAINT_FLAG} ${TAG_FLAG}
endif


ifeq ($(SSA_FLAG),SSA_GC)
    TOOL_LIBS += -L$(LIBDFT_PATH) -ldft -L${SYLVAN_LIB_PATH} -lSylvan_gc -lm-dynamic -ldwarf 
    TOOL_CXXFLAGS += $(LOGGING_FLAGS) -I$(LIBDFT_INC_PATH) -I${EWAH_INC_PATH} -I${SYLVAN_INC_PATH} -I${DWARF_INC_PATH} -L$(LIBDFT_PATH) -mfsgsbase -Wno-dangling-pointer ${TAINT_FLAG} ${TAG_FLAG}
endif

ifeq ($(SSA_FLAG),SSA_PROFILE)
    TOOL_LIBS += -L$(LIBDFT_PATH) -ldft -L${SYLVAN_LIB_PATH} -lSylvan_gc_profile -lm-dynamic -ldwarf 
    TOOL_CXXFLAGS += $(LOGGING_FLAGS) -I$(LIBDFT_INC_PATH) -I${EWAH_INC_PATH} -I${SYLVAN_INC_PATH} -I${DWARF_INC_PATH} -L$(LIBDFT_PATH) -mfsgsbase -DSSA_PROFILE ${TAINT_FLAG} ${TAG_FLAG}
endif

INPUT_FILE=cur_input
test_mini: $(OBJDIR)/track$(PINTOOL_SUFFIX) ${OBJDIR}/mini_test$(EXE_SUFFIX)
	$(PIN) -t $< -- $(OBJDIR)mini_test$(EXE_SUFFIX)  ${INPUT_FILE}
